This patch will create new files that add CMake support.
This build is only tested on Windows.

--- CMakeLists.txt.ORIG	2013-04-04 14:24:30.033093000 +0200
+++ CMakeLists.txt	2013-04-04 09:48:35.660985000 +0200
@@ -0,0 +1,275 @@
+PROJECT(libevent C)
+
+CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
+
+SET(LIBEVENT_VERSION "2.0.21-stable")
+SET(LIBEVENT_NUMERIC_VERSION "0x02001500")
+
+INCLUDE(CheckIncludeFiles)
+INCLUDE(CheckFunctionExists)
+INCLUDE(CheckTypeSize)
+
+# ----------------------------------------------------------------------
+# Check for everything in config.h.cmake
+# ----------------------------------------------------------------------
+
+CHECK_INCLUDE_FILES(arpa/inet.h  HAVE_ARPA_INET_H)
+CHECK_INCLUDE_FILES(dlfcn.h      HAVE_DLFCN_H)
+CHECK_INCLUDE_FILES(fcntl.h      HAVE_FCNTL_H)
+CHECK_INCLUDE_FILES(inttypes.h   HAVE_INTTYPES_H)
+CHECK_INCLUDE_FILES(memory.h     HAVE_MEMORY_H)
+CHECK_INCLUDE_FILES(netdb.h      HAVE_NETDB_H)
+CHECK_INCLUDE_FILES(netinet/in6.h HAVE_NETINET_IN6_H)
+CHECK_INCLUDE_FILES(netinet/in.h HAVE_NETINET_IN_H)
+CHECK_INCLUDE_FILES(openssl/bio.h HAVE_OPENSSL_BIO_H)
+CHECK_INCLUDE_FILES(poll.h       HAVE_POLL_H)
+CHECK_INCLUDE_FILES(port.h       HAVE_PORT_H)
+CHECK_INCLUDE_FILES(stdarg.h     HAVE_STDARG_H)
+CHECK_INCLUDE_FILES(stddef.h     HAVE_STDDEF_H)
+CHECK_INCLUDE_FILES(stdint.h     HAVE_STDINT_H)
+CHECK_INCLUDE_FILES(stdlib.h     HAVE_STDLIB_H)
+CHECK_INCLUDE_FILES(strings.h    HAVE_STRINGS_H)
+CHECK_INCLUDE_FILES(string.h     HAVE_STRING_H)
+CHECK_INCLUDE_FILES(sys/devpoll.h HAVE_SYS_DEVPOLL_H)
+CHECK_INCLUDE_FILES(sys/epoll.h  HAVE_SYS_EPOLL_H)
+CHECK_INCLUDE_FILES(sys/eventfd.h HAVE_SYS_EVENTFD_H)
+CHECK_INCLUDE_FILES(sys/event.h  HAVE_SYS_EVENT_H)
+CHECK_INCLUDE_FILES(sys/ioctl.h  HAVE_SYS_IOCTL_H)
+CHECK_INCLUDE_FILES(sys/mman.h   HAVE_SYS_MMAN_H)
+CHECK_INCLUDE_FILES(sys/param.h  HAVE_SYS_PARAM_H)
+CHECK_INCLUDE_FILES(sys/queue.h  HAVE_SYS_QUEUE_H)
+CHECK_INCLUDE_FILES(sys/select.h HAVE_SYS_SELECT_H)
+CHECK_INCLUDE_FILES(sys/sendfile.h HAVE_SYS_SENDFILE_H)
+CHECK_INCLUDE_FILES(sys/socket.h HAVE_SYS_SOCKET_H)
+CHECK_INCLUDE_FILES(sys/stat.h   HAVE_SYS_STAT_H)
+CHECK_INCLUDE_FILES(sys/sysctl.h HAVE_SYS_SYSCTL_H)
+CHECK_INCLUDE_FILES(sys/time.h   HAVE_SYS_TIME_H)
+CHECK_INCLUDE_FILES(sys/types.h  HAVE_SYS_TYPES_H)
+CHECK_INCLUDE_FILES(sys/uio.h    HAVE_SYS_UIO_H)
+CHECK_INCLUDE_FILES(sys/wait.h   HAVE_SYS_WAIT_H)
+CHECK_INCLUDE_FILES(unistd.h     HAVE_UNISTD_H)
+CHECK_INCLUDE_FILES(zlib.h       HAVE_ZLIB_H)
+CHECK_INCLUDE_FILES(signal.h     HAVE_SIGNAL_H)
+
+CHECK_FUNCTION_EXISTS(poll       HAVE_POLL)
+CHECK_FUNCTION_EXISTS(select     HAVE_SELECT)
+CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)
+CHECK_FUNCTION_EXISTS(vasprintf  HAVE_VASPRINTF)
+CHECK_FUNCTION_EXISTS(fcntl      HAVE_FCNTL)
+CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
+CHECK_FUNCTION_EXISTS(strtok_r   HAVE_STRTOK_R)
+CHECK_FUNCTION_EXISTS(strtoll    HAVE_STRTOLL)
+CHECK_FUNCTION_EXISTS(strsep     HAVE_STRSEP)
+CHECK_FUNCTION_EXISTS(getaddrinfo HAVE_GETADDRINFO)
+CHECK_FUNCTION_EXISTS(getnameinfo HAVE_GETNAMEINFO)
+CHECK_FUNCTION_EXISTS(strlcpy    HAVE_STRLCPY)
+CHECK_FUNCTION_EXISTS(inet_ntop  HAVE_INET_NTOP)
+CHECK_FUNCTION_EXISTS(sigtimedwait HAVE_SIGTIMEDWAIT)
+CHECK_FUNCTION_EXISTS(epoll_ctl  HAVE_EPOLL)
+CHECK_FUNCTION_EXISTS(kqueue     HAVE_KQUEUE)
+CHECK_FUNCTION_EXISTS(timeradd     HAVE_TIMERADD)
+CHECK_FUNCTION_EXISTS(timersub     HAVE_TIMERSUB)
+CHECK_FUNCTION_EXISTS(timerclear   HAVE_TIMERCLEAR)
+CHECK_FUNCTION_EXISTS(timerisset   HAVE_TIMERISSET)
+CHECK_TYPE_SIZE(int SIZEOF_INT)
+CHECK_TYPE_SIZE(long SIZEOF_LONG)
+CHECK_TYPE_SIZE("long long" SIZEOF_LONG_LONG)
+CHECK_TYPE_SIZE("size_t"    SIZEOF_SIZE_T)
+CHECK_TYPE_SIZE("ssize_t"   SIZEOF_SSIZE_T)
+CHECK_TYPE_SIZE("uint64_t"  SIZEOF_UINT64_T)
+CHECK_TYPE_SIZE("uint32_t"  SIZEOF_UINT32_T)
+CHECK_TYPE_SIZE("uint16_t"  SIZEOF_UINT16_T)
+CHECK_TYPE_SIZE("uint8_t"   SIZEOF_UINT8_T)
+CHECK_TYPE_SIZE("uintptr_t" SIZEOF_UINTPTR_T)
+CHECK_TYPE_SIZE("intptr_t"  SIZEOF_INTPTR_T)
+
+IF(HAVE_SIZEOF_UINT64_T)
+  SET(HAVE_UINT64_T 1)
+ENDIF()
+IF(HAVE_SIZEOF_UINT32_T)
+  SET(HAVE_UINT32_T 1)
+ENDIF()
+IF(HAVE_SIZEOF_UINT16_T)
+  SET(HAVE_UINT16_T 1)
+ENDIF()
+IF(HAVE_SIZEOF_UINT8_T)
+  SET(HAVE_UINT8_T 1)
+ENDIF()
+IF(HAVE_SIZEOF_UINTPTR_T AND HAVE_SIZEOF_INTPTR_T)
+  SET(HAVE_UINTPTR_T 1)
+ENDIF()
+IF(NOT HAVE_SIZEOF_SSIZE_T)
+  SET(ssize_t int)
+ENDIF()
+
+SET(HAVE_STRUCT_SOCKADDR_STORAGE 1)
+SET(HAVE_STRUCT_IN6_ADDR 1)
+SET(HAVE_STRUCT_SOCKADDR_IN6 1)
+
+CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake
+               ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+
+# ----------------------------------------------------------------------
+# Create "libevent.pc"
+# ----------------------------------------------------------------------
+
+# Installation paths
+SET(prefix      "${CMAKE_INSTALL_PREFIX}")
+SET(exec_prefix "\${prefix}")
+SET(includedir  "\${prefix}/include")
+SET(libdir      "\${exec_prefix}/lib")
+SET(VERSION     "${LIBEVENT_VERSION}")
+SET(LIBS        "")  # Libs.private: @LIBS@
+
+CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/libevent.pc.in
+               ${CMAKE_CURRENT_BINARY_DIR}/libevent.pc)
+
+INSTALL(FILES
+	${CMAKE_CURRENT_BINARY_DIR}/libevent.pc
+	DESTINATION lib/pkgconfig
+)
+
+# ----------------------------------------------------------------------
+# Create "event-config.h" from "config.h", in effect emulating the SED
+# script "make-event-config.sed"
+# ----------------------------------------------------------------------
+
+# Read all of the file, and create an empty file for output
+SET(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/include/event2/event-config.h)
+FILE(READ  ${CMAKE_CURRENT_BINARY_DIR}/config.h CONTENTS)
+FILE(WRITE ${OUTPUT} "")
+
+SET(EMPTY_LINE_MARKER "xxxxxxxxxxxxxxxxxxxxxxxx")
+STRING(REGEX REPLACE ";" "\\\\;" CONTENTS "${CONTENTS}")
+STRING(REGEX REPLACE "\n\n" ";${EMPTY_LINE_MARKER};" CONTENTS "${CONTENTS}")
+STRING(REGEX REPLACE "\n" ";" CONTENTS "${CONTENTS}")
+
+FOREACH(LINE ${CONTENTS})
+  STRING(REGEX REPLACE "#define  *" "#define _EVENT_" LINE "${LINE}")
+  STRING(REGEX REPLACE "#undef  *"  "#undef _EVENT_"  LINE "${LINE}")
+  STRING(REGEX REPLACE "#ifndef  *" "#ifndef _EVENT_" LINE "${LINE}")
+  STRING(REGEX REPLACE "#ifdef  *"  "#ifdef _EVENT_"  LINE "${LINE}")
+  # Change back from empty line marker to empty line
+  STRING(REGEX REPLACE "${EMPTY_LINE_MARKER}" "" LINE "${LINE}")
+  FILE(APPEND ${OUTPUT} "${LINE}\n")
+ENDFOREACH()
+
+# ----------------------------------------------------------------------
+# Add command line defines
+# ----------------------------------------------------------------------
+
+ADD_DEFINITIONS(-DHAVE_CONFIG_H)
+
+IF(WIN32)
+  ADD_DEFINITIONS(-D__func__=__FUNCTION__)
+  ADD_DEFINITIONS(-Dinline=__inline)
+  ADD_DEFINITIONS(-DBUILD_EVENT_DLL)
+  ADD_DEFINITIONS(-D_BIND_TO_CURRENT_MFC_VERSION=1 -D_BIND_TO_CURRENT_CRT_VERSION=1)
+  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_DEPRECATE)
+  ADD_DEFINITIONS(/wd4005)
+ENDIF()
+
+# ----------------------------------------------------------------------
+# Set include paths, specify what to build
+# ----------------------------------------------------------------------
+
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
+INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
+INCLUDE_DIRECTORIES(include)
+INCLUDE_DIRECTORIES(compat)
+
+SET(CORE_SOURCES
+  event.c
+  buffer.c
+  bufferevent.c
+  bufferevent_sock.c
+  bufferevent_pair.c
+  listener.c
+  evmap.c
+  log.c
+  evutil.c
+  strlcpy.c
+  signal.c
+  bufferevent_filter.c
+  evthread.c
+  bufferevent_ratelim.c
+  evutil_rand.c
+)
+
+SET(EXTRA_SOURCES
+  event_tagging.c
+  http.c
+  evdns.c
+  evrpc.c
+)
+
+SET(libevent_sources
+  ${CORE_SOURCES}
+  ${EXTRA_SOURCES}
+)
+
+IF(WIN32)
+  SET(WIN_SOURCES
+    libevent.def
+    win32select.c
+    evthread_win32.c
+    buffer_iocp.c
+    event_iocp.c
+    bufferevent_async.c
+  )
+  LIST(APPEND libevent_sources ${WIN_SOURCES})
+#  INCLUDE_DIRECTORIES(WIN32-Code)
+ENDIF()
+
+IF(HAVE_SELECT)
+  LIST(APPEND libevent_sources select.c)
+ENDIF()
+
+IF(HAVE_POLL)
+  LIST(APPEND libevent_sources poll.c)
+ENDIF()
+
+IF(HAVE_EPOLL)
+  LIST(APPEND libevent_sources epoll.c epoll_sub.c)
+ENDIF()
+
+IF(HAVE_SYS_DEVPOLL_H)
+  LIST(APPEND libevent_sources devpoll.c)
+ENDIF()
+
+IF(HAVE_PORT_H)
+  LIST(APPEND libevent_sources evport.c)
+ENDIF()
+
+IF(HAVE_KQUEUE)
+  LIST(APPEND libevent_sources kqueue.c)
+ENDIF()
+
+ADD_LIBRARY(event SHARED ${libevent_sources})
+
+IF(WIN32)
+  TARGET_LINK_LIBRARIES(event ws2_32) # winsock2 
+ENDIF()
+
+INSTALL(TARGETS event 
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib
+)
+
+# ----------------------------------------------------------------------
+# Define what to install, not in targets already
+# ----------------------------------------------------------------------
+
+INSTALL(FILES
+    event.h
+    evhttp.h
+    evdns.h
+    evrpc.h
+    evutil.h
+  DESTINATION include/
+)
+
+INSTALL(DIRECTORY include/event2
+  DESTINATION include/
+)

--- config.h.cmake.ORIG	2013-04-04 14:24:45.693441000 +0200
+++ config.h.cmake	2013-04-04 09:49:02.479964600 +0200
@@ -0,0 +1,82 @@
+#cmakedefine HAVE_ARPA_INET_H
+#cmakedefine HAVE_DLFCN_H
+#cmakedefine HAVE_FCNTL_H
+#cmakedefine HAVE_INTTYPES_H
+#cmakedefine HAVE_MEMORY_H
+#cmakedefine HAVE_NETDB_H
+#cmakedefine HAVE_NETINET_IN6_H
+#cmakedefine HAVE_NETINET_IN_H
+#cmakedefine HAVE_OPENSSL_BIO_H
+#cmakedefine HAVE_POLL_H
+#cmakedefine HAVE_PORT_H
+#cmakedefine HAVE_STDARG_H
+#cmakedefine HAVE_STDDEF_H
+#cmakedefine HAVE_STDINT_H
+#cmakedefine HAVE_STDLIB_H
+#cmakedefine HAVE_STRINGS_H
+#cmakedefine HAVE_STRING_H
+#cmakedefine HAVE_SYS_DEVPOLL_H
+#cmakedefine HAVE_SYS_EPOLL_H
+#cmakedefine HAVE_SYS_EVENTFD_H
+#cmakedefine HAVE_SYS_EVENT_H
+#cmakedefine HAVE_SYS_IOCTL_H
+#cmakedefine HAVE_SYS_MMAN_H
+#cmakedefine HAVE_SYS_PARAM_H
+#cmakedefine HAVE_SYS_QUEUE_H
+#cmakedefine HAVE_SYS_SELECT_H
+#cmakedefine HAVE_SYS_SENDFILE_H
+#cmakedefine HAVE_SYS_SOCKET_H
+#cmakedefine HAVE_SYS_STAT_H
+#cmakedefine HAVE_SYS_SYSCTL_H
+#cmakedefine HAVE_SYS_TIME_H
+#cmakedefine HAVE_SYS_TYPES_H
+#cmakedefine HAVE_SYS_UIO_H
+#cmakedefine HAVE_SYS_WAIT_H
+#cmakedefine HAVE_UNISTD_H
+#cmakedefine HAVE_ZLIB_H
+#cmakedefine HAVE_SIGNAL_H
+
+#cmakedefine HAVE_POLL
+#cmakedefine HAVE_SELECT
+#cmakedefine HAVE_GETTIMEOFDAY
+#cmakedefine HAVE_VASPRINTF
+#cmakedefine HAVE_FCNTL
+#cmakedefine HAVE_CLOCK_GETTIME
+#cmakedefine HAVE_STRTOK_R
+#cmakedefine HAVE_STRTOLL
+#cmakedefine HAVE_STRSEP
+#cmakedefine HAVE_GETADDRINFO
+#cmakedefine HAVE_GETNAMEINFO
+#cmakedefine HAVE_STRLCPY
+#cmakedefine HAVE_INET_NTOP
+#cmakedefine HAVE_SIGTIMEDWAIT
+#cmakedefine HAVE_EPOLL
+#cmakedefine HAVE_KQUEUE
+#cmakedefine HAVE_TIMERADD
+#cmakedefine HAVE_TIMERSUB
+#cmakedefine HAVE_TIMERISSET
+#cmakedefine HAVE_TIMERCLEAR
+
+#cmakedefine HAVE_STRUCT_SOCKADDR_STORAGE
+#cmakedefine HAVE_STRUCT_IN6_ADDR
+#cmakedefine HAVE_STRUCT_SOCKADDR_IN6
+
+#cmakedefine SIZEOF_INT @SIZEOF_INT@
+#cmakedefine SIZEOF_LONG @SIZEOF_LONG@
+#cmakedefine SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@
+#cmakedefine SIZEOF_SIZE_T @SIZEOF_SIZE_T@
+#cmakedefine SIZEOF_SSIZE_T @SIZEOF_SSIZE_T@
+#cmakedefine SIZEOF_UINT64_T @SIZEOF_UINT64_T@
+#cmakedefine SIZEOF_UINT32_T @SIZEOF_UINT32_T@
+#cmakedefine SIZEOF_UINT8_T @SIZEOF_UINT8_T@
+#cmakedefine SIZEOF_UINTPTR_T @SIZEOF_UINTPTR_T@
+#cmakedefine HAVE_UINT64_T
+#cmakedefine HAVE_UINT32_T
+#cmakedefine HAVE_UINT16_T
+#cmakedefine HAVE_UINT8_T
+#cmakedefine HAVE_UINTPTR_T
+
+#cmakedefine ssize_t @ssize_t@
+
+#define VERSION "@LIBEVENT_VERSION@"
+#define NUMERIC_VERSION "@LIBEVENT_NUMERIC_VERSION@"

--- libevent.def.ORIG	2013-04-04 14:24:58.541283000 +0200
+++ libevent.def	2013-04-04 08:13:33.327492100 +0200
@@ -0,0 +1,337 @@
+LIBRARY event.dll
+EXPORTS
+	bufferevent_add_to_rate_limit_group
+	bufferevent_base_set
+	bufferevent_disable
+	bufferevent_enable
+	bufferevent_flush
+	bufferevent_free
+	bufferevent_get_base
+	bufferevent_get_enabled
+	bufferevent_get_input
+	bufferevent_get_max_to_read
+	bufferevent_get_max_to_write
+	bufferevent_get_output
+	bufferevent_get_underlying
+	bufferevent_getfd
+	bufferevent_lock
+	bufferevent_pair_get_partner
+	bufferevent_pair_new
+	bufferevent_priority_set
+	bufferevent_rate_limit_group_free
+	bufferevent_rate_limit_group_get_totals
+	bufferevent_rate_limit_group_new
+	bufferevent_rate_limit_group_reset_totals
+	bufferevent_rate_limit_group_set_cfg
+	bufferevent_rate_limit_group_set_min_share
+	bufferevent_read
+	bufferevent_read_buffer
+	bufferevent_remove_from_rate_limit_group
+	bufferevent_set_rate_limit
+	bufferevent_set_timeouts
+	bufferevent_setcb
+	bufferevent_setfd
+	bufferevent_setwatermark
+	bufferevent_socket_connect
+	bufferevent_socket_connect_hostname
+	bufferevent_socket_get_dns_error
+	bufferevent_socket_new
+	bufferevent_unlock
+	bufferevent_write
+	bufferevent_write_buffer
+	ev_token_bucket_cfg_free
+	ev_token_bucket_cfg_new
+	evbuffer_add
+	evbuffer_add_buffer
+	evbuffer_add_cb
+	evbuffer_add_file
+	evbuffer_add_printf
+	evbuffer_add_reference
+	evbuffer_add_vprintf
+	evbuffer_cb_clear_flags
+	evbuffer_cb_set_flags
+	evbuffer_clear_flags
+	evbuffer_commit_space
+	evbuffer_copyout
+	evbuffer_defer_callbacks
+	evbuffer_drain
+	evbuffer_enable_locking
+	evbuffer_expand
+	evbuffer_free
+	evbuffer_freeze
+	evbuffer_get_contiguous_space
+	evbuffer_get_length
+	evbuffer_lock
+	evbuffer_new
+	evbuffer_peek
+	evbuffer_prepend
+	evbuffer_prepend_buffer
+	evbuffer_ptr_set
+	evbuffer_pullup
+	evbuffer_read
+	evbuffer_readln
+	evbuffer_remove
+	evbuffer_remove_buffer
+	evbuffer_remove_cb
+	evbuffer_remove_cb_entry
+	evbuffer_reserve_space
+	evbuffer_search
+	evbuffer_search_eol
+	evbuffer_search_range
+	evbuffer_set_flags
+	evbuffer_unfreeze
+	evbuffer_unlock
+	evbuffer_write
+	evbuffer_write_atmost
+	evdns_add_server_port_with_base
+	evdns_base_clear_nameservers_and_suspend
+	evdns_base_config_windows_nameservers
+	evdns_base_count_nameservers
+	evdns_base_free
+	evdns_base_load_hosts
+	evdns_base_nameserver_add
+	evdns_base_nameserver_ip_add
+	evdns_base_nameserver_sockaddr_add
+	evdns_base_new
+	evdns_base_resolv_conf_parse
+	evdns_base_resolve_ipv4
+	evdns_base_resolve_ipv6
+	evdns_base_resolve_reverse
+	evdns_base_resolve_reverse_ipv6
+	evdns_base_resume
+	evdns_base_search_add
+	evdns_base_search_clear
+	evdns_base_search_ndots_set
+	evdns_base_set_option
+	evdns_cancel_request
+	evdns_close_server_port
+	evdns_config_windows_nameservers
+	evdns_err_to_string
+	evdns_getaddrinfo
+	evdns_getaddrinfo_cancel
+	evdns_server_request_add_a_reply
+	evdns_server_request_add_aaaa_reply
+	evdns_server_request_add_cname_reply
+	evdns_server_request_add_ptr_reply
+	evdns_server_request_add_reply
+	evdns_server_request_drop
+	evdns_server_request_get_requesting_addr
+	evdns_server_request_respond
+	evdns_server_request_set_flags
+	evdns_set_log_fn
+	evdns_set_random_bytes_fn
+	evdns_set_transaction_id_fn
+	event_active
+	event_add
+	event_assign
+	event_base_dispatch
+	event_base_dump_events
+	event_base_free
+	event_base_get_features
+	event_base_get_method
+	event_base_gettimeofday_cached
+	event_base_got_break
+	event_base_got_exit
+	event_base_init_common_timeout
+	event_base_loop
+	event_base_loopbreak
+	event_base_loopexit
+	event_base_new
+	event_base_new_with_config
+	event_base_once
+	event_base_priority_init
+	event_base_set
+	event_config_avoid_method
+	event_config_free
+	event_config_new
+	event_config_require_features
+	event_config_set_flag
+	event_config_set_num_cpus_hint
+	event_debug_unassign
+	event_del
+	event_enable_debug_mode
+	event_free
+	event_get_assignment
+	event_get_base
+	event_get_callback
+	event_get_callback_arg
+	event_get_events
+	event_get_fd
+	event_get_struct_event_size
+	event_get_supported_methods
+	event_get_version
+	event_get_version_number
+	event_initialized
+	event_new
+	event_pending
+	event_priority_set
+	event_reinit
+	event_set_fatal_callback
+	event_set_log_callback
+	event_set_mem_functions
+	evhttp_accept_socket
+	evhttp_accept_socket_with_handle
+	evhttp_add_header
+	evhttp_add_server_alias
+	evhttp_add_virtual_host
+	evhttp_bind_listener
+	evhttp_bind_socket
+	evhttp_bind_socket_with_handle
+	evhttp_bound_socket_get_fd
+	evhttp_bound_socket_get_listener
+	evhttp_cancel_request
+	evhttp_clear_headers
+	evhttp_connection_base_new
+	evhttp_connection_free
+	evhttp_connection_get_base
+	evhttp_connection_get_bufferevent
+	evhttp_connection_get_peer
+	evhttp_connection_set_closecb
+	evhttp_connection_set_local_address
+	evhttp_connection_set_local_port
+	evhttp_connection_set_max_body_size
+	evhttp_connection_set_max_headers_size
+	evhttp_connection_set_retries
+	evhttp_connection_set_timeout
+	evhttp_decode_uri
+	evhttp_del_accept_socket
+	evhttp_del_cb
+	evhttp_encode_uri
+	evhttp_find_header
+	evhttp_free
+	evhttp_htmlescape
+	evhttp_make_request
+	evhttp_new
+	evhttp_parse_query
+	evhttp_parse_query_str
+	evhttp_remove_header
+	evhttp_remove_server_alias
+	evhttp_remove_virtual_host
+	evhttp_request_free
+	evhttp_request_get_command
+	evhttp_request_get_connection
+	evhttp_request_get_evhttp_uri
+	evhttp_request_get_host
+	evhttp_request_get_input_buffer
+	evhttp_request_get_input_headers
+	evhttp_request_get_output_buffer
+	evhttp_request_get_output_headers
+	evhttp_request_get_response_code
+	evhttp_request_get_uri
+	evhttp_request_is_owned
+	evhttp_request_new
+	evhttp_request_own
+	evhttp_request_set_chunked_cb
+	evhttp_send_error
+	evhttp_send_reply
+	evhttp_send_reply_chunk
+	evhttp_send_reply_end
+	evhttp_send_reply_start
+	evhttp_set_allowed_methods
+	evhttp_set_cb
+	evhttp_set_gencb
+	evhttp_set_max_body_size
+	evhttp_set_max_headers_size
+	evhttp_set_timeout
+	evhttp_uri_free
+	evhttp_uri_get_fragment
+	evhttp_uri_get_host
+	evhttp_uri_get_path
+	evhttp_uri_get_port
+	evhttp_uri_get_query
+	evhttp_uri_get_scheme
+	evhttp_uri_get_userinfo
+	evhttp_uri_join
+	evhttp_uri_new
+	evhttp_uri_parse
+	evhttp_uri_parse_with_flags
+	evhttp_uri_set_flags
+	evhttp_uri_set_fragment
+	evhttp_uri_set_host
+	evhttp_uri_set_path
+	evhttp_uri_set_port
+	evhttp_uri_set_query
+	evhttp_uri_set_scheme
+	evhttp_uri_set_userinfo
+	evhttp_uridecode
+	evhttp_uriencode
+	evrpc_add_hook
+	evrpc_free
+	evrpc_get_reply
+	evrpc_get_request
+	evrpc_hook_add_meta
+	evrpc_hook_find_meta
+	evrpc_hook_get_connection
+	evrpc_init
+	evrpc_make_request
+	evrpc_make_request_ctx
+	evrpc_pool_add_connection
+	evrpc_pool_free
+	evrpc_pool_new
+	evrpc_pool_remove_connection
+	evrpc_pool_set_timeout
+	evrpc_register_generic
+	evrpc_register_rpc
+	evrpc_remove_hook
+	evrpc_request_done
+	evrpc_request_get_pool
+	evrpc_request_set_cb
+	evrpc_request_set_pool
+	evrpc_resume_request
+	evrpc_send_request_generic
+	evrpc_unregister_rpc
+	evtag_consume
+	evtag_encode_int
+	evtag_init
+	evtag_marshal
+	evtag_marshal_int
+	evtag_marshal_string
+	evtag_marshal_timeval
+	evtag_payload_length
+	evtag_peek
+	evtag_peek_length
+	evtag_unmarshal
+	evtag_unmarshal_fixed
+	evtag_unmarshal_int
+	evtag_unmarshal_string
+	evtag_unmarshal_timeval
+	evthread_enable_lock_debuging
+	evthread_make_base_notifiable
+	evthread_set_condition_callbacks
+	evthread_set_id_callback
+	evthread_set_lock_callbacks
+	evthread_use_windows_threads
+	evutil_ascii_strcasecmp
+	evutil_ascii_strncasecmp
+	evutil_closesocket
+	evutil_freeaddrinfo
+	evutil_gai_strerror
+	evutil_getaddrinfo
+	evutil_gettimeofday
+	evutil_inet_ntop
+	evutil_inet_pton
+	evutil_make_listen_socket_reuseable
+	evutil_make_socket_closeonexec
+	evutil_make_socket_nonblocking
+	evutil_parse_sockaddr_port
+	evutil_secure_rng_add_bytes
+	evutil_secure_rng_get_bytes
+	evutil_secure_rng_init
+	evutil_snprintf
+	evutil_sockaddr_cmp
+	evutil_socketpair
+	evutil_strtoll
+	evutil_vsnprintf
+; Backward compatibility functions
+	bufferevent_new
+	evbuffer_readline
+	evbuffer_setcb
+	event_dispatch
+	event_get_method
+	event_init
+	event_loop
+	event_loopbreak
+	event_loopexit
+	event_once
+	event_set
+	bufferevent_settimeout
